// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package v3

import (
	"context"
	"sync"

	"github.com/arxon31/metrics-collector/internal/entity"
)

// Ensure, that storageServiceMock does implement storageService.
// If this is not the case, regenerate this file with moq.
var _ storageService = &storageServiceMock{}

// storageServiceMock is a mock implementation of storageService.
//
//	func TestSomethingThatUsesstorageService(t *testing.T) {
//
//		// make and configure a mocked storageService
//		mockedstorageService := &storageServiceMock{
//			SaveBatchMetricsFunc: func(ctx context.Context, metrics []entity.MetricDTO) error {
//				panic("mock out the SaveBatchMetrics method")
//			},
//		}
//
//		// use mockedstorageService in code that requires storageService
//		// and then make assertions.
//
//	}
type storageServiceMock struct {
	// SaveBatchMetricsFunc mocks the SaveBatchMetrics method.
	SaveBatchMetricsFunc func(ctx context.Context, metrics []entity.MetricDTO) error

	// calls tracks calls to the methods.
	calls struct {
		// SaveBatchMetrics holds details about calls to the SaveBatchMetrics method.
		SaveBatchMetrics []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Metrics is the metrics argument value.
			Metrics []entity.MetricDTO
		}
	}
	lockSaveBatchMetrics sync.RWMutex
}

// SaveBatchMetrics calls SaveBatchMetricsFunc.
func (mock *storageServiceMock) SaveBatchMetrics(ctx context.Context, metrics []entity.MetricDTO) error {
	if mock.SaveBatchMetricsFunc == nil {
		panic("storageServiceMock.SaveBatchMetricsFunc: method is nil but storageService.SaveBatchMetrics was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Metrics []entity.MetricDTO
	}{
		Ctx:     ctx,
		Metrics: metrics,
	}
	mock.lockSaveBatchMetrics.Lock()
	mock.calls.SaveBatchMetrics = append(mock.calls.SaveBatchMetrics, callInfo)
	mock.lockSaveBatchMetrics.Unlock()
	return mock.SaveBatchMetricsFunc(ctx, metrics)
}

// SaveBatchMetricsCalls gets all the calls that were made to SaveBatchMetrics.
// Check the length with:
//
//	len(mockedstorageService.SaveBatchMetricsCalls())
func (mock *storageServiceMock) SaveBatchMetricsCalls() []struct {
	Ctx     context.Context
	Metrics []entity.MetricDTO
} {
	var calls []struct {
		Ctx     context.Context
		Metrics []entity.MetricDTO
	}
	mock.lockSaveBatchMetrics.RLock()
	calls = mock.calls.SaveBatchMetrics
	mock.lockSaveBatchMetrics.RUnlock()
	return calls
}
