// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package v1

import (
	"context"
	"sync"

	"github.com/arxon31/metrics-collector/internal/entity"
)

// Ensure, that storageServiceMock does implement storageService.
// If this is not the case, regenerate this file with moq.
var _ storageService = &storageServiceMock{}

// storageServiceMock is a mock implementation of storageService.
//
//	func TestSomethingThatUsesstorageService(t *testing.T) {
//
//		// make and configure a mocked storageService
//		mockedstorageService := &storageServiceMock{
//			SaveCounterMetricFunc: func(ctx context.Context, metric entity.MetricDTO) error {
//				panic("mock out the SaveCounterMetric method")
//			},
//			SaveGaugeMetricFunc: func(ctx context.Context, metric entity.MetricDTO) error {
//				panic("mock out the SaveGaugeMetric method")
//			},
//		}
//
//		// use mockedstorageService in code that requires storageService
//		// and then make assertions.
//
//	}
type storageServiceMock struct {
	// SaveCounterMetricFunc mocks the SaveCounterMetric method.
	SaveCounterMetricFunc func(ctx context.Context, metric entity.MetricDTO) error

	// SaveGaugeMetricFunc mocks the SaveGaugeMetric method.
	SaveGaugeMetricFunc func(ctx context.Context, metric entity.MetricDTO) error

	// calls tracks calls to the methods.
	calls struct {
		// SaveCounterMetric holds details about calls to the SaveCounterMetric method.
		SaveCounterMetric []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Metric is the metric argument value.
			Metric entity.MetricDTO
		}
		// SaveGaugeMetric holds details about calls to the SaveGaugeMetric method.
		SaveGaugeMetric []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Metric is the metric argument value.
			Metric entity.MetricDTO
		}
	}
	lockSaveCounterMetric sync.RWMutex
	lockSaveGaugeMetric   sync.RWMutex
}

// SaveCounterMetric calls SaveCounterMetricFunc.
func (mock *storageServiceMock) SaveCounterMetric(ctx context.Context, metric entity.MetricDTO) error {
	if mock.SaveCounterMetricFunc == nil {
		panic("storageServiceMock.SaveCounterMetricFunc: method is nil but storageService.SaveCounterMetric was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Metric entity.MetricDTO
	}{
		Ctx:    ctx,
		Metric: metric,
	}
	mock.lockSaveCounterMetric.Lock()
	mock.calls.SaveCounterMetric = append(mock.calls.SaveCounterMetric, callInfo)
	mock.lockSaveCounterMetric.Unlock()
	return mock.SaveCounterMetricFunc(ctx, metric)
}

// SaveCounterMetricCalls gets all the calls that were made to SaveCounterMetric.
// Check the length with:
//
//	len(mockedstorageService.SaveCounterMetricCalls())
func (mock *storageServiceMock) SaveCounterMetricCalls() []struct {
	Ctx    context.Context
	Metric entity.MetricDTO
} {
	var calls []struct {
		Ctx    context.Context
		Metric entity.MetricDTO
	}
	mock.lockSaveCounterMetric.RLock()
	calls = mock.calls.SaveCounterMetric
	mock.lockSaveCounterMetric.RUnlock()
	return calls
}

// SaveGaugeMetric calls SaveGaugeMetricFunc.
func (mock *storageServiceMock) SaveGaugeMetric(ctx context.Context, metric entity.MetricDTO) error {
	if mock.SaveGaugeMetricFunc == nil {
		panic("storageServiceMock.SaveGaugeMetricFunc: method is nil but storageService.SaveGaugeMetric was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Metric entity.MetricDTO
	}{
		Ctx:    ctx,
		Metric: metric,
	}
	mock.lockSaveGaugeMetric.Lock()
	mock.calls.SaveGaugeMetric = append(mock.calls.SaveGaugeMetric, callInfo)
	mock.lockSaveGaugeMetric.Unlock()
	return mock.SaveGaugeMetricFunc(ctx, metric)
}

// SaveGaugeMetricCalls gets all the calls that were made to SaveGaugeMetric.
// Check the length with:
//
//	len(mockedstorageService.SaveGaugeMetricCalls())
func (mock *storageServiceMock) SaveGaugeMetricCalls() []struct {
	Ctx    context.Context
	Metric entity.MetricDTO
} {
	var calls []struct {
		Ctx    context.Context
		Metric entity.MetricDTO
	}
	mock.lockSaveGaugeMetric.RLock()
	calls = mock.calls.SaveGaugeMetric
	mock.lockSaveGaugeMetric.RUnlock()
	return calls
}
